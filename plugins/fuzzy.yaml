# Fuzzy file files and buffers 
- repo: ctrlpvim/ctrlp.vim
  hook_source: |
        let g:ctrlp_status_func = {'':''}
        let g:ctrlp_map = '<c-,>'
        let g:ctrlp_follow_symlinks = 1
        let g:ctrlp_default_input = 0
        let g:ctrlp_line_prefix = ' '
        let g:ctrlp_open_single_match = ['buffer tags', 'buffer']
        let g:ctrlp_working_path_mode = 'ra'
        let g:ctrlp_switch_buffer = 'Et'
        let g:ctrlp_mruf_exclude = '.*/tmp/.*\|.*/.git/.*'
        let g:ctrlp_show_hidden = 1
        let g:ctrlp_max_files = 200000
        if exists('g:ctrlp_user_command')
          unlet g:ctrlp_user_command
        endif
        if executable('rg')
          let g:ctrlp_user_command =
            \ 'rg %s --files --color=never --smart-case --hidden --maxdepth 10 --glob "!.git/*"'
          let g:ctrlp_use_caching = 0
        else
          let g:ctrlp_custom_ignore = '\.git$\|\.hg$\|\.svn$'
          let g:ctrlp_user_command = ['.git', 'cd %s && git ls-files . --cached --exclude-standard --others']
        endif
# ----------------------------------------------------------------------------
- repo: alok/notational-fzf-vim
  hook_add: | 
    let g:nv_search_paths = ['~/dmas/2020']
    let g:nv_default_extension = '.md'
    let g:nv_show_preview = 1
    let g:nv_wrap_preview_text = 1
    let g:nv_window_width = '50%'
    let g:nv_use_short_pathnames = 1
    let g:nv_preview_width = 60
    nmap <Leader>z :NV<CR>

- repo: junegunn/fzf
  build: './install --all'
  merged: 0

- repo: junegunn/fzf.vim

- repo: yuki-ycino/fzf-preview.vim

# ----------------------------------------------------------------------------

# Search text
- repo: dyng/ctrlsf.vim
  hook_source: |
    nmap     \f <Plug>CtrlSFPrompt
    vmap     \f <Plug>CtrlSFVwordPath
    vmap     \F <Plug>CtrlSFVwordExec
    nmap     \n <Plug>CtrlSFCwordPath
    nmap     \p <Plug>CtrlSFPwordPath
    nnoremap \o :CtrlSFOpen<CR>
    nnoremap \t :CtrlSFToggle<CR>
    inoremap \t <Esc>:CtrlSFToggle<CR>

# Replace in all files
- { repo: brooth/far.vim, on_cmd: [ Far, Farp, F ] }

# Far makes it easy to find and replace text in multiple files. It adds the
# :Far pattern1 pattern2 command. When you run this command, it splits the
# screen in two halves. In the upper half it shows all files and lines that
# pattern1 matches. In the lower half, it previews the match context. In the
# upper split, you can use hjkl keys to navigate matches. By default, all
# matches will be replaced with pattern2 but you can also use the t key to
# unmark the matches (and use t again to mark them). After you have selected
# all matches that you want to replace, run the :Fardo command. This command
# will perform the actual replacement.
# Far also is great for grepping all matches. You can use :F pattern command
# and it will find all pattern matches and display them in two splits, but it
# won't do the replacement.

- repo: liuchengxu/vista.vim
  on_cmd: Vista
  hook_add: |
    let g:vista#renderer#enable_icon = 1
    let g:vista_echo_cursor_strategy = 'scroll'
    let g:vista_vimwiki_executive = 'markdown'
    let g:vista_executive_for = {
      \ 'vimwiki': 'markdown',
      \ 'pandoc': 'markdown',
      \ 'markdown': 'toc',
      \ }
